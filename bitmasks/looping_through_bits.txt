Source - 'Fedor and New Game' from Codeforces Div 2 - B ladder 



Extract of the problem:

Given, value of k, count of the numbers that have atmost k dissimilar bits with the last element
from the list of m + 1 elements given.

Solution:

Using bitmasks, looping through from the lsb(least significant bit) to msb till one of them exceed 
one of the two values being compared(resp.).

Comparing every jth bit of the numbers and checking if the two results are not equal, and if this is satisfied
count is increased. This is possible because, on checking if jth bit of a number, when using bitmasks, gives 
the same number irrespective of the number being checked(demonstrated in the explanation).

Checking count values for every number with k and updating the result value.
And, finally printing the value of the result.

Explanation:

Bitmasks are a.k.a lightweigth, small sets of boolean values. An integer is stored in the machine as a 
sequence of bits. Hence, any integer up to (64 bits max) can be used to represent boolean values, as 
each bit is either 0 or 1. This kind of manipulation is much faster than any other techniques or methods 
provided by C++, like, STL vectors, maps and such.

    Manipulation of the bits,
    
          Let's say variable 'a' has the value 34,
          
                  a = 34(decimal) = 10010(binary equivalent)
                  
          In this case, the 5th bit and the 2nd bit are 1 and can represent true values and other bits false
          
          
          
          Multiplication or Division,
          
          Any integer can be multiplied or divided by 2 raised to the power n, simply by shifting or slicing bits
          from the bits representing the integer,
          
          a = 34 / 2 = (34 >> 1) = 1001 = 17              // (>>) operator performs the slicing of bits operation
          
          previously,
          
          a = 34 = 10010
          a / 2 = 1001(0) = 17                            // the last zero has been sliced off from the bits and 
          
          for multiplication,
          
          a * 2 = 34 * 2 = (34 << 1) = 100100 = 68        // (<<) operator performs the shifting of bits operation
          
          
          
          
          
          
          
